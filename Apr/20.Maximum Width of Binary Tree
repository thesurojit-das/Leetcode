class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        int returnVal = 0;
        std::queue<std::pair<TreeNode*, long long>> nodeQ;
        nodeQ.emplace(root, 0);
        while(nodeQ.empty() == false)
        {
            int nodeQLen = nodeQ.size();
            long long startIndex = nodeQ.front().second;
            long long endIndex = nodeQ.back().second;
            returnVal = std::max(returnVal, static_cast<int>(endIndex - startIndex + 1));

            for(int i = 0; i < nodeQLen; i++)
            {
                TreeNode* node = nodeQ.front().first;
                long long index = nodeQ.front().second - startIndex;
                nodeQ.pop();
                if(node->left != nullptr)
                {
                    nodeQ.emplace(node->left, index * 2);
                }
                if(node->right != nullptr)
                {
                    nodeQ.emplace(node->right, 2 * index + 1);
                }
            }
        }
        return returnVal;
    }
};
